{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nlet LoginComponent = class LoginComponent {\n  authService;\n  route;\n  router;\n  companyId = '';\n  employeeId = '';\n  pin = '';\n  error = '';\n  showPin = false;\n  isLoading = false;\n  constructor(authService, route, router) {\n    this.authService = authService;\n    this.route = route;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.companyId = params.get('companyId') || '';\n    });\n    this.route.queryParams.subscribe(query => {\n      if (query['expired']) {\n        this.error = 'Your session has expired. Please log in again.';\n      }\n    });\n  }\n  onLogin() {\n    this.isLoading = true;\n    this.error = '';\n    this.authService.login(this.employeeId, this.pin, this.companyId).subscribe({\n      next: res => {\n        this.isLoading = false;\n        localStorage.setItem('auth_token', res.token);\n        localStorage.setItem('employee_name', res.employee_name);\n        localStorage.setItem('punch_status', res.punch_status);\n        localStorage.setItem('employee_id', res.employee_id);\n        localStorage.setItem('punch_in_time', res.punch_in_time);\n        localStorage.setItem('break_start_time', res.break_start_time);\n        localStorage.setItem('break_end_time', res.break_end_time);\n        localStorage.setItem('punch_out_time', res.punch_out_time);\n        this.navigateBasedOnPunchStatus(res.punch_status);\n      },\n      error: err => {\n        this.isLoading = false;\n        console.error('Login failed:', err);\n        this.error = err?.error?.message || 'The login information you entered is incorrect.';\n      }\n    });\n  }\n  navigateBasedOnPunchStatus(punchStatus) {\n    const baseRoute = `/${this.companyId}`;\n    const routesMap = {\n      'NOT_PUNCHED_IN': `${baseRoute}/punch`,\n      'PUNCHED_IN': `${baseRoute}/punch`,\n      'ON_BREAK': `${baseRoute}/punch`,\n      'FINISHED_BREAK': `${baseRoute}/punch`,\n      'PUNCHED_OUT': `${baseRoute}/punch`\n    };\n    /* const routesMap: { [key: string]: string } = {\n       'NOT_PUNCHED_IN': `${baseRoute}/punch`,\n       'PUNCHED_IN': `${baseRoute}/break`,\n       'ON_BREAK': `${baseRoute}/resume-work`,\n       'FINISHED_BREAK': `${baseRoute}/resume-work`,\n       'PUNCHED_OUT': `${baseRoute}/summary`\n     };*/\n    const targetRoute = routesMap[punchStatus] || `${baseRoute}/punch`;\n    console.log('Navigating to:', targetRoute);\n    this.router.navigate([targetRoute]);\n  }\n  togglePinVisibility() {\n    this.showPin = !this.showPin;\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n}), __metadata(\"design:paramtypes\", [AuthService, ActivatedRoute, Router])], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
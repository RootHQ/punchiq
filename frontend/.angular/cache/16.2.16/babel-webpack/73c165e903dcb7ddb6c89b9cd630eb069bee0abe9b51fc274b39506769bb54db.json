{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PunchService } from '../../services/punch.service';\nimport { jwtDecode } from 'jwt-decode';\nimport { MissedPunchDialogComponent } from '../missed-punch-dialog/missed-punch-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"../../services/punch.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nfunction PunchComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nfunction PunchComponent_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function PunchComponent_button_17_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.sendPunch(\"punchIn\"));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.isLoading ? \"Punching in...\" : \"Punch In\", \" \");\n  }\n}\nfunction PunchComponent_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function PunchComponent_button_18_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.sendPunch(\"breakStart\"));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.isLoading ? \"Starting Break...\" : \"Start Break\", \" \");\n  }\n}\nfunction PunchComponent_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function PunchComponent_button_19_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.sendPunch(\"breakEnd\"));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.isLoading ? \"Ending Break...\" : \"End Break\", \" \");\n  }\n}\nfunction PunchComponent_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function PunchComponent_button_20_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.sendPunch(\"punchOut\"));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.isLoading ? \"Punching out...\" : \"Punch Out for the Day\", \" \");\n  }\n}\nfunction PunchComponent_a_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 22);\n    i0.ɵɵlistener(\"click\", function PunchComponent_a_28_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onMissedPunch());\n    });\n    i0.ɵɵtext(1, \" Missed Punch \");\n    i0.ɵɵelementEnd();\n  }\n}\nlet PunchComponent = /*#__PURE__*/(() => {\n  class PunchComponent {\n    authService;\n    route;\n    router;\n    dialog;\n    punchService;\n    companyId = '';\n    employeeId = '';\n    employeeName = '';\n    typeBreak = '';\n    pin = '';\n    error = '';\n    companyName = '';\n    punchInTime = '';\n    breakStartTime = '';\n    breakEndTime = '';\n    punchOutTime = '';\n    punchStatus = ''; // Possible values: 'NONE', 'break_start', 'break_end_time', 'punch_out_time'\n    punchStatusTemporal = false;\n    isLoading = false;\n    constructor(authService, route, router, dialog, punchService) {\n      this.authService = authService;\n      this.route = route;\n      this.router = router;\n      this.dialog = dialog;\n      this.punchService = punchService;\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        this.companyId = params.get('companyId') || '';\n      });\n      this.route.queryParams.subscribe(() => {\n        const token = this.authService.getToken();\n        if (token) {\n          const payload = jwtDecode(token);\n          const exp = payload.exp * 1000;\n          const currentTime = Date.now();\n          const minutesLeft = (exp - currentTime) / (1000 * 60);\n          if (minutesLeft > 0 && minutesLeft <= 5) {\n            // this.dialog.open(SessionExpirationDialogComponent, {\n            //   data: { minutes: Math.floor(minutesLeft) },\n            //  width: '400px'\n            // });\n          }\n          if (currentTime >= exp) {\n            this.authService.logout();\n            this.router.navigate(['/' + this.companyId + '/login'], {\n              queryParams: {\n                expired: true\n              }\n            });\n            return;\n          }\n          this.employeeId = payload.sub || '';\n          this.employeeName = payload.empName || '';\n          this.pin = atob(payload.pin_encrypted || '');\n          this.companyName = payload.company_id || '';\n          this.typeBreak = localStorage.getItem('punch_status') || '';\n          // New Time Fields\n          this.punchInTime = localStorage.getItem('punch_in_time') || '';\n          this.breakStartTime = localStorage.getItem('break_start_time') || '';\n          this.breakEndTime = localStorage.getItem('break_end_time') || '';\n          this.punchOutTime = localStorage.getItem('punch_out_time') || '';\n          // Debugging logs\n          console.log('punchInTime:', this.punchInTime);\n          console.log('breakStartTime:', this.breakStartTime);\n          console.log('breakEndTime:', this.breakEndTime);\n          console.log('punchOutTime:', this.punchOutTime);\n          // Persist to localStorage if needed\n          localStorage.setItem('employee_id', this.employeeId);\n          localStorage.setItem('employee_name', this.employeeName);\n          localStorage.setItem('pin', this.pin);\n          localStorage.setItem('company_name', this.companyName);\n          this.updatePunchStatus();\n        } else {\n          this.authService.logout();\n          this.router.navigate(['/' + this.companyId + '/login'], {\n            queryParams: {\n              expired: true\n            }\n          });\n        }\n      });\n    }\n    getLastPunchTime() {\n      let lastTime = '';\n      let lastLabel = '';\n      if (this.isValidTime(this.punchInTime)) {\n        lastTime = this.punchInTime;\n        lastLabel = 'Punch In';\n        console.log('punchInTime lastTime:', lastTime);\n      }\n      if (this.isValidTime(this.breakStartTime)) {\n        lastTime = this.breakStartTime;\n        lastLabel = 'Break Start';\n        console.log('Break Start lastTime:', lastTime);\n      }\n      if (this.isValidTime(this.breakEndTime)) {\n        lastTime = this.breakEndTime;\n        lastLabel = 'Break End';\n        console.log('Break End lastTime:', lastTime);\n      }\n      if (this.isValidTime(this.punchOutTime)) {\n        lastTime = this.punchOutTime;\n        lastLabel = 'Punch Out';\n        console.log('Punch Out lastTime:', lastTime);\n      }\n      if (!lastTime) {\n        return 'Your last recorded punch: No punches yet';\n      }\n      return `Your last recorded punch: ${lastTime} EST (${lastLabel})`;\n    }\n    isValidTime(value) {\n      const isValid = value != null && value !== '' && value !== 'null';\n      return isValid;\n    }\n    updatePunchStatus() {\n      this.punchStatus = 'NONE'; // Default status\n      if (this.isValidTime(this.punchInTime)) {\n        this.punchStatus = 'punchInTime';\n      }\n      if (this.isValidTime(this.breakStartTime)) {\n        this.punchStatus = 'breakStartTime';\n      }\n      if (this.isValidTime(this.breakEndTime)) {\n        this.punchStatus = 'breakEndTime';\n      }\n      if (this.isValidTime(this.punchOutTime)) {\n        this.punchStatus = 'punchOutTime';\n      }\n      console.log('Punch Status:', this.punchStatus);\n    }\n    updatePunchStatusTemp(punchStatusTemporal = false) {\n      if (this.punchStatus = 'NONE') {\n        this.punchStatus = 'punchInTime';\n      }\n      if (this.isValidTime(this.punchInTime)) {\n        this.punchStatus = 'breakStartTime';\n      }\n      if (this.isValidTime(this.breakStartTime)) {\n        this.punchStatus = 'breakEndTime';\n      }\n      if (this.isValidTime(this.breakEndTime)) {\n        this.punchStatus = 'punchOutTime';\n      }\n      console.log('Punch Status Temporal:', this.punchStatus);\n    }\n    onMissedPunch() {\n      const lastPunchTime = this.getLastPunchTime();\n      const dialogRef = this.dialog.open(MissedPunchDialogComponent, {\n        data: {\n          lastPunchTime: lastPunchTime\n        },\n        width: '500px',\n        panelClass: 'custom-dialog-container'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result === 'confirm') {\n          console.log('Missed Punch Confirmed');\n          this.punchStatusTemporal = true;\n          this.updatePunchStatusTemp(this.punchStatusTemporal);\n          this.router.navigate([this.router.url]);\n        } else {\n          console.log('Missed Punch Canceled');\n        }\n      });\n    }\n    onLogout() {\n      this.authService.logout();\n      this.router.navigate(['/' + this.companyId + '/login']);\n    }\n    onPunch() {\n      this.sendPunch('punchIn');\n    }\n    sendPunch(action) {\n      const currentDate = new Date();\n      const formattedDate = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD\n      const formattedTime = currentDate.toTimeString().split(' ')[0].substring(0, 5); // HH:MM\n      this.isLoading = true;\n      // Fetch Public IP Address\n      fetch('https://api.ipify.org?format=json').then(response => response.json()).then(data => {\n        const ipAddress = data.ip;\n        const punchData = {\n          employeeId: this.employeeId,\n          companyId: this.companyId,\n          netsuiteId: null,\n          Date: formattedDate,\n          punch_in_time: '',\n          punch_out_time: '',\n          break_start_time: '',\n          break_end_time: '',\n          ip_address: ipAddress // Include IP here\n        };\n\n        switch (action) {\n          case 'punchIn':\n            punchData.punch_in_time = formattedTime;\n            localStorage.setItem('punch_in_time', formattedTime);\n            break;\n          case 'breakStart':\n            punchData.break_start_time = formattedTime;\n            localStorage.setItem('break_start_time', formattedTime);\n            break;\n          case 'breakEnd':\n            punchData.break_end_time = formattedTime;\n            localStorage.setItem('break_end_time', formattedTime);\n            break;\n          case 'punchOut':\n            punchData.punch_out_time = formattedTime;\n            localStorage.setItem('punch_out_time', formattedTime);\n            break;\n          default:\n            console.error('Invalid action:', action);\n            return;\n        }\n        localStorage.setItem('punch_status', action);\n        // Send Punch with IP\n        this.punchService.updatePunch(punchData).subscribe({\n          next: response => {\n            console.log('✅ Punch updated successfully:', response);\n            // Update Local Variables\n            this.punchInTime = localStorage.getItem('punch_in_time') || '';\n            this.breakStartTime = localStorage.getItem('break_start_time') || '';\n            this.breakEndTime = localStorage.getItem('break_end_time') || '';\n            this.punchOutTime = localStorage.getItem('punch_out_time') || '';\n            this.typeBreak = action;\n            this.updatePunchStatus();\n            this.isLoading = false;\n          },\n          error: error => {\n            this.isLoading = false;\n            console.error('❌ Error updating punch:', error);\n            this.error = 'Failed to update punch. Please try again.';\n          }\n        });\n        const baseRoute = `/${this.companyId}`;\n        const targetRoute = `${baseRoute}/confirmation-punch`;\n        console.log('Navigating to:', targetRoute);\n        this.router.navigate([targetRoute]);\n      }).catch(error => {\n        this.isLoading = false;\n        console.error('❌ Failed to fetch IP address:', error);\n        this.error = 'Unable to get IP address.';\n      });\n    }\n    static ɵfac = function PunchComponent_Factory(t) {\n      return new (t || PunchComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.PunchService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PunchComponent,\n      selectors: [[\"app-punch\"]],\n      decls: 32,\n      vars: 11,\n      consts: [[1, \"header\"], [1, \"logo\"], [1, \"login-container\"], [1, \"login-box\"], [1, \"description\"], [1, \"form\", 3, \"ngSubmit\"], [\"for\", \"employeeId\", 1, \"label\"], [\"type\", \"text\", \"id\", \"employeeId\", \"name\", \"employeeId\", \"disabled\", \"\", \"readonly\", \"\", 1, \"input_disabled\", 3, \"value\"], [\"for\", \"pin\", 1, \"label\"], [\"id\", \"pin\", \"name\", \"pin\", \"maxlength\", \"4\", \"disabled\", \"\", \"readonly\", \"\", 1, \"input_disabled\", 3, \"type\", \"value\"], [1, \"space-top\"], [\"class\", \"error\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-login topSpace punchDays\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-login topSpace breackbtn\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-login topSpace punchOutbtn\", 3, \"click\", 4, \"ngIf\"], [1, \"divider\"], [1, \"btn\", \"btn-login\", \"topSpace\", \"Logoutbtn\", 3, \"click\"], [\"class\", \"missed-punch\", 3, \"click\", 4, \"ngIf\"], [1, \"error\"], [\"type\", \"button\", 1, \"btn\", \"btn-login\", \"topSpace\", \"punchDays\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-login\", \"topSpace\", \"breackbtn\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-login\", \"topSpace\", \"punchOutbtn\", 3, \"click\"], [1, \"missed-punch\", 3, \"click\"]],\n      template: function PunchComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"div\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\");\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"p\", 4);\n          i0.ɵɵtext(7, \"Select your punch choice below.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"form\", 5);\n          i0.ɵɵlistener(\"ngSubmit\", function PunchComponent_Template_form_ngSubmit_8_listener() {\n            return ctx.onPunch();\n          });\n          i0.ɵɵelementStart(9, \"label\", 6);\n          i0.ɵɵtext(10, \"Employee ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 7);\n          i0.ɵɵelementStart(12, \"label\", 8);\n          i0.ɵɵtext(13, \"Pin\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 9);\n          i0.ɵɵelementStart(15, \"div\", 10);\n          i0.ɵɵtemplate(16, PunchComponent_div_16_Template, 2, 1, \"div\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(17, PunchComponent_button_17_Template, 2, 1, \"button\", 12);\n          i0.ɵɵtemplate(18, PunchComponent_button_18_Template, 2, 1, \"button\", 13);\n          i0.ɵɵtemplate(19, PunchComponent_button_19_Template, 2, 1, \"button\", 13);\n          i0.ɵɵtemplate(20, PunchComponent_button_20_Template, 2, 1, \"button\", 14);\n          i0.ɵɵelementStart(21, \"div\", 15);\n          i0.ɵɵtext(22, \"OR\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function PunchComponent_Template_button_click_23_listener() {\n            return ctx.onLogout();\n          });\n          i0.ɵɵtext(24, \"Logout\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"br\")(26, \"br\")(27, \"br\");\n          i0.ɵɵtemplate(28, PunchComponent_a_28_Template, 2, 0, \"a\", 17);\n          i0.ɵɵelement(29, \"br\")(30, \"br\")(31, \"br\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate2(\"Hey \", ctx.employeeName, \" \", ctx.typeBreak, \" \");\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"value\", ctx.employeeId);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"type\", \"password\")(\"value\", ctx.pin);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.punchStatus === \"NONE\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.punchStatus === \"punchInTime\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.punchStatus === \"breakStartTime\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.punchStatus === \"breakEndTime\");\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.punchStatus !== \"breakEndTime\" && !ctx.punchStatusTemporal);\n        }\n      },\n      dependencies: [i5.NgIf, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.NgForm],\n      styles: [\".punch-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;background-color:#1c1c1c;height:100vh;font-family:Segoe UI,sans-serif}.punch-box[_ngcontent-%COMP%]{background-color:#2b2b2b;padding:40px;border-radius:12px;text-align:center;width:100%;max-width:400px;color:#fff}.description[_ngcontent-%COMP%]{font-size:.9rem;color:#ccc;margin-bottom:20px}.form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block;text-align:left;margin:10px 0 5px;font-weight:700;color:#ddd}.form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;padding:10px;border-radius:6px;border:none;margin-bottom:15px;background-color:#3a3a3a;color:#fff}.btn-punch[_ngcontent-%COMP%]{width:100%;padding:12px;background-color:#4caf50;border:none;border-radius:6px;font-weight:700;color:#fff;cursor:pointer;font-size:1rem}.separator[_ngcontent-%COMP%]{margin:20px 0;color:#999;font-size:.9rem}.btn-logout[_ngcontent-%COMP%]{width:100%;padding:12px;background-color:#888;border:none;border-radius:6px;color:#fff;font-weight:700;cursor:pointer;margin-bottom:10px}.missed-punch[_ngcontent-%COMP%]{display:block;color:#ccc;font-size:.85rem;text-decoration:underline;cursor:pointer}.description[_ngcontent-%COMP%]{font-size:12px;color:#dfdfdf;margin-bottom:20px}.form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block;text-align:left;margin:20px 0 5px;color:#b2b2b2;font-weight:500;font-size:12px}.form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:95%;padding:10px;border-radius:6px;border:none;margin-bottom:10px;background-color:#323232;color:#fff}.Logoutbtn[_ngcontent-%COMP%]{margin-top:20px;background-color:#7f7f7f}.punchDays[_ngcontent-%COMP%]{background-color:#3bb95c}.divider[_ngcontent-%COMP%]{display:flex;align-items:center;text-align:center;color:#fff;height:19vh;justify-content:center}.divider[_ngcontent-%COMP%]:before, .divider[_ngcontent-%COMP%]:after{content:\\\"\\\";flex:1;border-bottom:1px solid white;margin:0 1em}.missed-punch[_ngcontent-%COMP%]{color:#b2b2b2;text-align:center;text-decoration:underline;cursor:pointer}.punchOutbtn[_ngcontent-%COMP%]{background-color:#c83d3d}.breackbtn[_ngcontent-%COMP%]{background-color:#42abcd}\"]\n    });\n  }\n  return PunchComponent;\n})();\nexport { PunchComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
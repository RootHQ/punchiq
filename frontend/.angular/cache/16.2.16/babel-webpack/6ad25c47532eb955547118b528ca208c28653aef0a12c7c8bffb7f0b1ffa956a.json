{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { jwtDecode } from 'jwt-decode';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    apiUrl = 'https://st7tfw3sl3.execute-api.us-east-2.amazonaws.com/default/login-netsuite';\n    TOKEN_KEY = 'auth_token';\n    USER_KEY = 'employee_name';\n    COMPANY_KEY = 'company_id';\n    constructor(http) {\n      this.http = http;\n    }\n    login(employeeId, pin, company_id) {\n      return this.http.post(this.apiUrl, {\n        employee_id: employeeId,\n        pin: pin,\n        company_id: company_id\n      }).pipe(tap(response => {\n        console.log('[Login response]', response);\n        if (response.token && response.employee_name && company_id) {\n          this.saveSession(response.token, response.employee_name, company_id);\n        } else {\n          console.warn('Missing fields in response:', response);\n        }\n      }));\n    }\n    isTokenExpired() {\n      const token = this.getToken();\n      if (!token) {\n        console.warn('No token found');\n        return true;\n      }\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Math.floor(Date.now() / 1000);\n        const expired = decoded.exp < currentTime;\n        if (expired) {\n          console.warn('Token has expired');\n        }\n        return expired;\n      } catch (e) {\n        console.error('Invalid token format:', e);\n        return true;\n      }\n    }\n    saveSession(token, name, company_id) {\n      localStorage.setItem(this.TOKEN_KEY, token);\n      localStorage.setItem(this.USER_KEY, name);\n      localStorage.setItem(this.COMPANY_KEY, company_id);\n    }\n    logout() {\n      localStorage.removeItem(this.TOKEN_KEY);\n      localStorage.removeItem(this.USER_KEY);\n    }\n    getToken() {\n      return localStorage.getItem(this.TOKEN_KEY);\n    }\n    getEmployeeName() {\n      return localStorage.getItem(this.USER_KEY);\n    }\n    isLoggedIn() {\n      return !!this.getToken();\n    }\n    static ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
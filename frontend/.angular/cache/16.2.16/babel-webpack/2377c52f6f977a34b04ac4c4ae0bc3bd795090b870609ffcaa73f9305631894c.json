{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nlet ConfirmationPunchComponent = class ConfirmationPunchComponent {\n  authService;\n  router;\n  route;\n  http;\n  punchStatus = ''; // Possible values: 'NONE', 'break_start', 'break_end_time', 'punch_out_time'\n  companyId = '';\n  punchInTime = '';\n  breakStartTime = '';\n  breakEndTime = '';\n  punchOutTime = '';\n  countdownSeconds = 5;\n  countdownInterval;\n  messageShowPunch = 'Stay positive and keep going!';\n  constructor(authService, router, route, http) {\n    this.authService = authService;\n    this.router = router;\n    this.route = route;\n    this.http = http;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.companyId = params.get('companyId') || '';\n    });\n    this.punchInTime = localStorage.getItem('punch_in_time') || '';\n    this.breakStartTime = localStorage.getItem('break_start_time') || '';\n    this.breakEndTime = localStorage.getItem('break_end_time') || '';\n    this.punchOutTime = localStorage.getItem('punch_out_time') || '';\n    this.updatePunchStatus();\n    console.log('Punch Status:', this.punchStatus);\n    this.fetchAffirmation();\n    this.startCountdown();\n  }\n  fetchAffirmation() {\n    this.http.get('https://www.affirmations.dev/').subscribe({\n      next: res => {\n        this.messageShowPunch = res.affirmation;\n      },\n      error: () => {\n        this.messageShowPunch = 'Stay positive and keep going!';\n      }\n    });\n  }\n  startCountdown() {\n    this.countdownInterval = setInterval(() => {\n      this.countdownSeconds--;\n      if (this.countdownSeconds === 0) {\n        clearInterval(this.countdownInterval);\n        console.log('ðŸ”“ Unlocking and redirecting after 5 seconds...');\n        this.onLogout();\n      }\n    }, 1000);\n  }\n  updatePunchStatus() {\n    this.punchStatus = 'NONE'; // Default status\n    if (this.isValidTime(this.punchInTime)) {\n      this.punchStatus = 'punchInTime';\n    }\n    if (this.isValidTime(this.breakStartTime)) {\n      this.punchStatus = 'breakStartTime';\n    }\n    if (this.isValidTime(this.breakEndTime)) {\n      this.punchStatus = 'breakEndTime';\n    }\n    if (this.isValidTime(this.punchOutTime)) {\n      this.punchStatus = 'punchOutTime';\n    }\n    console.log('Punch Status finished:', this.punchStatus);\n  }\n  isValidTime(value) {\n    const isValid = value != null && value !== '' && value !== 'null';\n    return isValid;\n  }\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/' + this.companyId + '/login']);\n  }\n};\nConfirmationPunchComponent = __decorate([Component({\n  selector: 'app-confirmation-punch',\n  templateUrl: './confirmation-punch.component.html',\n  styleUrls: ['./confirmation-punch.component.css']\n}), __metadata(\"design:paramtypes\", [AuthService, Router, ActivatedRoute, HttpClient])], ConfirmationPunchComponent);\nexport { ConfirmationPunchComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
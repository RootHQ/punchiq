{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nlet PunchComponent = class PunchComponent {\n  authService;\n  route;\n  router;\n  constructor(authService, route, router) {\n    this.authService = authService;\n    this.route = route;\n    this.router = router;\n  }\n  companyId = '';\n  employeeId = '';\n  pin = '';\n  error = '';\n  companyName = '';\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.companyId = params.get('companyId') || '';\n    });\n    this.route.queryParams.subscribe(query => {\n      console.log('Logout ' + this.authService.isTokenExpired());\n      if (this.authService.isTokenExpired()) {\n        console.log('logout ' + this.authService.isTokenExpired());\n        this.authService.logout();\n        this.router.navigate(['/' + this.companyId + '/login'], {\n          queryParams: {\n            expired: true\n          }\n        });\n      }\n      console.log('Company ID:', this.companyId);\n      console.log('Query Params:', query);\n      console.log('Token:', this.authService.getToken());\n      this.employeeId = localStorage.getItem('employee_id') || '';\n      this.pin = localStorage.getItem('pin') || '';\n      this.companyName = localStorage.getItem('company_name') || '';\n    });\n  }\n  onPunch() {\n    const punchData = {\n      employee_id: this.employeeId,\n      pin: this.pin,\n      company_id: this.companyId,\n      ip_address: '',\n      local_time: new Date().toISOString()\n    };\n    // Get public IP (you can use an external API)\n    fetch('https://api.ipify.org?format=json').then(response => response.json()).then(data => {\n      punchData.ip_address = data.ip;\n      // Now send the PATCH request (replace with your API endpoint)\n      //this.authService.sendPunch(punchData).subscribe({\n      //  next: (response) => {\n      //    console.log('Punch recorded successfully', response);\n      //    // Handle success, maybe navigate or show a success message\n      // },\n      // error: (err) => {\n      //   console.error('Error sending punch:', err);\n      //   this.error = 'Failed to record punch. Please try again.';\n      //   }\n      // });\n    }).catch(error => {\n      console.error('Error getting IP:', error);\n      this.error = 'Unable to get IP address.';\n    });\n  }\n  onLogout() {\n    console.log('Logout clicked');\n    this.authService.logout();\n    this.router.navigate(['/' + this.companyId + '/login']);\n  }\n};\nPunchComponent = __decorate([Component({\n  selector: 'app-punch',\n  templateUrl: './punch.component.html',\n  styleUrls: ['./punch.component.css']\n}), __metadata(\"design:paramtypes\", [AuthService, ActivatedRoute, Router])], PunchComponent);\nexport { PunchComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
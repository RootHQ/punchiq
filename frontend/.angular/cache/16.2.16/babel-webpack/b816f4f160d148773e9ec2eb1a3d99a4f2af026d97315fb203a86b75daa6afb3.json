{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nlet AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    authService;\n    router;\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    intercept(req, next) {\n      // Verificar si el token estÃ¡ expirado antes de enviar la solicitud\n      if (this.authService.isTokenExpired()) {\n        this.authService.logout();\n        // ðŸ”½ AquÃ­ es donde rediriges con el query param ?expired=true\n        this.router.navigate(['/login']);\n        return throwError(() => new Error('Token expired'));\n      }\n      // Agregar token al header si existe\n      const token = this.authService.getToken();\n      const authReq = token ? req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      }) : req;\n      return next.handle(authReq).pipe(\n      // Captura errores 401 para cerrar sesiÃ³n y redirigir\n      catchError(error => {\n        if (error.status === 401) {\n          this.authService.logout();\n          this.router.navigate(['/login'], {\n            queryParams: {\n              expired: true\n            }\n          });\n        }\n        return throwError(() => error);\n      }));\n    }\n    static Éµfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ÉµÉµinject(i1.AuthService), i0.ÉµÉµinject(i2.Router));\n    };\n    static Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.Éµfac\n    });\n  }\n  return AuthInterceptor;\n})();\nexport { AuthInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}